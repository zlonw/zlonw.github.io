<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL8.0.21+keepalived双机热备</title>
    <url>/zlonw.github.io/2023/09/26/MySQL8-0-21-keepalived%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/</url>
    <content><![CDATA[<ol>
<li><p>环境准备<br>虚拟机安装CentOS7，并且在官网下载MySQL8.0.21压缩文件，给两台服务器都安装MySQL<br>配置双机主主同步，将两台MySQL都当成master,无论哪一个处理数据，另一个都会同步<br>使用keepalived实现MySQL双主热备，无论谁宕机另一台服务可以马上顶上去。</p>
</li>
<li><p>keepalived原理总结<br>keepalived基于VRRP协议的软件实现，原生设计目的为了高可用 ipvs服务 ipvs，IP虚拟服务器（IP Virtual Server，简写为IPVS）。是运行在LVS下的提供负载均衡功能的一种技术。</p>
<p>keepalived的功能：</p>
<ol>
<li>基于vrrp协议完成地址流动</li>
<li>为vip地址所在的节点生成ipvs规则(在配置文件中预先定义)</li>
<li>为ipvs集群的各RS（后端的Real Server）做健康状态检测</li>
<li>基于脚本调用接口完成脚本中定义的功能，进而影响集群事务，以此支持nginx、haproxy等服务</li>
<li>Keepalived高可用对之间是通过VRRP进行通信的，VRRP是通过竞选机制来确定主备节点的，主节点的优先级高于备节点，因此，工作时主节点会优先获得所有的资源，备节点处于等待状态，当主节点出现故障时，备节点就会接管主节点的资源，然后顶替主节点对外提供服务。</li>
<li>在Keepalived服务对之间，只有作为主节点的服务器会一直发送 VRRP广播包，告诉备节点它还活着，此时备节点不会抢占主节点资源，当主节点不可用时，即备节点监听不到主节点发送的广播包时，备节点就会启动相关服务接管主节点的资源，保证业务的连续性。接管速度最快可以小于1秒。</li>
</ol>
</li>
<li><p>将MySQL上传至虚拟机中</p>
</li>
<li><p>创建基础文件加和用户组、用户</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mkdir</span> -p /mysql/&#123;data,bin-log,slow-log,error-log,app,pid,socket,tmp&#125; <span class="comment">#创建文件夹</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">groupadd mysql <span class="comment">#创建用户组</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">useradd -r -g mysql mysql  <span class="comment">#创建用户，设置用户组为MySQL</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">chown</span> -R mysql:mysql /mysql <span class="comment">#将文件夹赋权给MySQL用户</span></span></span><br></pre></td></tr></table></figure></div></li>
<li><p>解压MySQL压缩包,改名为app,移动至指定文件夹</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">tar -xvf mysql-8.0.21-linux-glibc2.12-x86_64.tar.xz <span class="comment">#解压</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mv</span> mysql-8.0.21-linux-glibc2.12-x86_64 mysql <span class="comment">#剪切改名</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mv</span> mysql /mysql/app <span class="comment">#将文件夹剪切到设定好的目录下</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> /mysql/app/mysql &amp;&amp; <span class="built_in">chown</span> -R mysql:mysql ./ <span class="comment">#进入mysql下并授权所有文件</span></span></span><br></pre></td></tr></table></figure></div></li>
<li><p>创建my.cnf配置文件，并加入以下内容</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">服务端口号，默认3306</span></span><br><span class="line">port=3306 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#mysql的主机和客户机在同一host上的时候，使用unix domain socket做为通讯协议的载体</span></span></span><br><span class="line">socket=/mysql/socket/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#MySQL服务的唯一编号,每个MySQL服务ID需要唯一</span></span></span><br><span class="line">server-id=1 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#服务端口号，默认3306</span></span></span><br><span class="line">port=3306 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#查询模式,添加该行可支持分组查询时查询多列 (select c1,c2,c3,count(1) total from tables group by c1)</span></span></span><br><span class="line">sql_mode=&#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#mysql安装根目录</span></span></span><br><span class="line">basedir=/mysql/app/mysql </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#mysql的主机和客户机在同一host上的时候，使用unix domain socket做为通讯协议的载体</span></span></span><br><span class="line">socket=/mysql/socket/mysql.sock</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#MySQL数据文件所在位置</span></span></span><br><span class="line">datadir=/mysql/data </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#记录的是当前MySQL进程的 pid</span></span></span><br><span class="line">pid-file=/mysql/pid/mysql.pid </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#设置临时目录</span></span></span><br><span class="line">tmpdir=/mysql/tmp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#用户</span></span></span><br><span class="line">user=mysql </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#允许访问的IP网段</span></span></span><br><span class="line">bind-address=0.0.0.0 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#skip-grant-tables 跳过密码登录</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#skip-external-locking 主要用于MyISAM存储引擎,如果多台服务器连接一个数据库则建议注释下面内容</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#skip_name_resolve = 1 只能用IP地址检查客户端的登录，不用主机名</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#transaction_isolation = READ-COMMITTED 事务隔离级别，默认为可重复读，mysql默认可重复读级别（此级别下可能参数很多间隙锁，影响性能）</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）</span></span></span><br><span class="line">character-set-server = utf8mb4 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#数据库字符集对应一些排序等规则，注意要和character-set-server对应</span></span></span><br><span class="line">collation-server = utf8mb4_general_ci </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#设置client连接mysql时的字符集,防止乱码</span></span></span><br><span class="line">init_connect=&#x27;SET NAMES utf8mb4&#x27; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#是否对sql语句大小写敏感，1表示不敏感</span></span></span><br><span class="line">lower_case_table_names = 1 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#最大连接数</span></span></span><br><span class="line">max_connections = 400  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#最大错误连接数</span></span></span><br><span class="line">max_connect_errors = 1000 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#TIMESTAMP如果没有显示声明NOT NULL，允许NULL值</span></span></span><br><span class="line">explicit_defaults_for_timestamp = true </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#SQL数据包发送的大小，如果有BLOB对象建议修改成1G</span></span></span><br><span class="line">max_allowed_packet = 1G  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span></span></span><br><span class="line">interactive_timeout = 1800 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span></span></span><br><span class="line">wait_timeout = 1800 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#内部内存临时表的最大值 ，设置成128M。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#比如大数据量的group by ,order by时可能用到临时表，</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#超过了这个值将写入磁盘，系统IO压力增大</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">tmp_table_size = 134217728</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">max_heap_table_size = 134217728</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">##禁用mysql的缓存查询结果集功能</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#后期根据业务情况测试决定是否开启</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#大部分情况下关闭下面两项</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">query_cache_size = 0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">query_cache_type = 0</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">##数据库错误日志文件</span></span></span><br><span class="line">log_error = /mysql/error_log/mysql_error.log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#慢查询sql日志设置</span></span></span><br><span class="line">slow_query_log = 1</span><br><span class="line">slow_query_log_file = /mysql/slow_log/mysql_slow_query.log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#检查未使用到索引的sql</span></span></span><br><span class="line">log_queries_not_using_indexes = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数</span></span></span><br><span class="line">log_throttle_queries_not_using_indexes = 5</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#作为从库时生效,从库复制中如何有慢sql也将被记录</span></span></span><br><span class="line">log_slow_slave_statements = 1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#慢查询执行的秒数，必须达到此值可被记录</span></span></span><br><span class="line">long_query_time = 8</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#检索的行数必须达到此值才可被记为慢查询</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">min_examined_row_limit = 100</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#开启 binlog ( 二进制 ) 日志，主要用来做增量备份跟主从同步</span></span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">忽略写入binlog日志的数据库</span></span><br><span class="line">binlog-ignore-db=mysql,information_schema</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">字段变化增量值</span></span><br><span class="line">auto-increment-increment=2</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始子段ID为1</span></span><br><span class="line">auto-increment-offset=1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">忽略复制错误</span></span><br><span class="line">slave-skip-errors=all</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">binlog日志位置</span></span><br><span class="line">log_bin=/mysql/data/bin-log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#Mysql binlog 的日志格式，Statement、ROW 跟 Mixed（ 混合模式 ）</span></span></span><br><span class="line">binlog_format = mixed</span><br><span class="line">skip_ssl</span><br><span class="line">default-authentication-plugin=mysql_native_password</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 二进制日志缓冲大小，此参数是为每 Session 单独分配的，当一个线程开始一个事务时，Mysql 就会为此 Session 分配一个 binlog cache，当这个事务提交时，binlog cache 中的数据被写入 binlog 文件</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 通过 show status like &#x27;binlog_cache%&#x27;; 来查看使用 binlog cache 的次数及使用磁盘的次数</span></span></span><br><span class="line">binlog_cache_size = 2M</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 这个参数对 Mysql 系统来说很重要，不仅影响到 binlog 对 Mysql 所带来的性能损耗，还影响到 Mysql 中数据的完整性。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 值为 0 时代表事务提交后，Mysql 不做 fsync 之类的磁盘同步指令刷新 binlog_cache 中的信息到磁盘，而让 Filesystem 自行决定什么时候同步，或者 cache 满了之后才同步磁盘。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 值为 n 时代表进行 n 次事务提交后，Mysql 将进行一次 fsync 之类的磁盘同步指令来将 binlog_cache 中的数据强制写入磁盘。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 系统默认将此参数设置为 0 ，即不做任何强制性的磁盘刷新指令，性能最好，但是风险也最大。当系统崩溃时 binlog_cache 中的所有 binlog 信息都会丢失。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 而设置为 1 时，是最安全但是性能损耗最大。当系统崩溃时，最多丢失 binlog_cache 中未完成的一个事务，对实际数据没有实质性的影响。</span></span></span><br><span class="line">sync_binlog = 0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 保留 30 天的 binlog 日志，系统重启、执行 flush logs 或 binlog 日志文件大小达到上限时删除 binlog 日志</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">expire_logs_days = 30</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#开启事件功能定时任务等</span></span></span><br><span class="line">event_scheduler=ON </span><br><span class="line">default-time_zone=&#x27;+8:00&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#innodb存储引擎默认缓冲池大小(推荐服务器内存的一半)</span></span></span><br><span class="line">innodb_buffer_pool_size=2G </span><br><span class="line">innodb_buffer_pool_instances=4</span><br><span class="line">read_buffer_size=32M</span><br><span class="line">read_rnd_buffer_size=32M</span><br><span class="line">join_buffer_size=32M</span><br><span class="line">sort_buffer_size=64M</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#读的IO线程数</span></span></span><br><span class="line">innodb_read_io_threads=16 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#写的IO线程数</span></span></span><br><span class="line">innodb_write_io_threads=16 </span><br><span class="line">table_open_cache=4000</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
<li><p>将启动文件放入自启动目录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cp</span> /mysql/app/mysql/support-files/mysql.server /etc/init.d/mysqld</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>初始化MySQL</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">bin/mysqld --initialize --user=mysql --console</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>去启动日志中找初始密码</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cat</span> /mysql/error_log/mysql_error.log</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>启动MySQL并登录测试</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl daemon-reload   <span class="comment">#需要先刷新daemon，不然会提示找不到MySQL服务</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl status mysqld   <span class="comment">#查看服务状态</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl start mysqld    <span class="comment">#启动服务</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl restart mysqld  <span class="comment">#重启服务</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl stop mysqld     <span class="comment">#停止服务</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/mysql/app/mysql/bin/mysql -uroot -p密码   <span class="comment">#登录</span></span></span><br></pre></td></tr></table></figure></div></li>
<li><p>修改root密码并设置客户端访问MySQL服务的权限</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;optms90582&#x27;</span>;  <span class="comment">-- 修改密码</span></span><br><span class="line">use mysql; <span class="comment">-- 切换数据库</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>; <span class="comment">-- 查看用户列表</span></span><br><span class="line"><span class="comment">-- 设置访问权限为所有客户端主机均可访问,即更新root用户的host字段为&#x27;%&#x27;</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>; </span><br><span class="line">exit  <span class="comment">--退出客户端 </span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl restart mysqld  <span class="comment">#重启MySQL服务</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl stop firewalld  <span class="comment">#关闭防火墙</span></span></span><br></pre></td></tr></table></figure></div></li>
<li><p>出现问题，登录时报错：Packages providing this file are:’mariadb’’mysql’</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">ln</span> -s /mysql/app/mysql/bin/mysql /usr/bin <span class="comment">#将当前版本的MySQL软连接配置到/usr/bin下</span></span></span><br></pre></td></tr></table></figure></div></li>
<li><p>出现问题，mysql -uroot -p报错：error while loading shared libraries: libtinfo.so.5: cannot open shared object file: No such file or directory</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">find / -name <span class="string">&#x27;libtinfo*&#x27;</span> <span class="comment">#全局查询该文件</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">ln</span> -s /usr/lib64/libtinfo.so.6.2 /usr/lib64/libtinfo.so.5 <span class="comment">#配置软连接，给6.2一个别名5</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
<li><p>编辑mysql.cnf，最终的my.cnf见上文,修改完成后重启服务，注意两台服务的server-id必须是唯一的</p>
</li>
<li><p>查看Master的binlog日志和pos值的位置</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"> <span class="comment">-- 查看master</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line">    <span class="comment">-- 例：显示结果： File=mysql-bin.000002  Position=120</span></span><br><span class="line"><span class="comment">-- 查看Slave</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line">    <span class="comment">--例： File=mysql-bin.000006 Position=689</span></span><br></pre></td></tr></table></figure></div>
<p>16.两个服务增加同步用户</p>
</li>
</ol>
<p>master: 192.168.206.135</p>
<p>slave: 192.168.206.136</p>
<p>配置同步用户时需要注意对方的bin-log和Position的数值，必须呼应上</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- master(192.168.206.135)执行：</span></span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.206.136&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;optms90582&#x27;</span>;</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> <span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.206.136&#x27;</span>;</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.206.136&#x27;</span>,</span><br><span class="line">    master_user<span class="operator">=</span><span class="string">&#x27;root&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;optms90582&#x27;</span>,</span><br><span class="line">    master_log_file<span class="operator">=</span><span class="string">&#x27;bin-log.000001&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">156</span>;</span><br><span class="line"><span class="comment">--slave(192.168.206.136)执行：</span></span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> <span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.206.135&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;optms90582&#x27;</span>;</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> <span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;192.168.206.135&#x27;</span>;</span><br><span class="line"><span class="keyword">sql</span><span class="operator">&gt;</span> change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.206.135&#x27;</span>,</span><br><span class="line">    master_user<span class="operator">=</span><span class="string">&#x27;root&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;optms90582&#x27;</span>,</span><br><span class="line">    master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000008&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">156</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>17.主主同步配置完成，查看Slave_IO和Slave_SQL状态，都时YES的时候说明主主同步成功，可以创建数据库表进行测试</p>
<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> slave status \G;</span><br></pre></td></tr></table></figure></div>
<p>如果Slave_IO和Slave_SQL有一个不是YES的时候可能防火墙没关、两个服务IP不对应、Por值匹配不到、bin-log不一致，需要具体看看<br>18.两台服务器都需要安装keepalived，从网上下载keeplived-2.2.0源码压缩包，进行编译安装<br>19.解压压缩包，并将安装包放到创建好的目录下</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">tar -zxvf keepalived-2.2.0.tar.gz</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mv</span> keepalived-2.2.0 keepalived</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mv</span> keepalived /mysql</span></span><br></pre></td></tr></table></figure></div>
<p>20.进入主目录进行检查编译安装</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> keepalived</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">./configure --prefix=/mysql/keepalived</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">make &amp; make install</span></span><br></pre></td></tr></table></figure></div>
<p>21.修改配置</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动脚本变量引用文件</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cp</span> /mysql/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将keepalived 主程序加入到环境变量下</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cp</span> /mysql/keepalived/sbin/keepalived /usr/sbin/keepalived</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将启动脚本放到init.d目录下 Linux9的init.d目录在/etc/rc.d/init.d</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cp</span> /mysql/keepalived/keepalived/etc/init.d/keepalived /etc/init.d/keepalived</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将配置文件放到默认路径下</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">mkdir</span> /etc/keepalived</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cp</span> /mysql/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf</span></span><br></pre></td></tr></table></figure></div>
<p>22.启动</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">service keepalived start</span></span><br></pre></td></tr></table></figure></div>
<p>23.查看日志</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">tail</span> -f /var/log/message</span></span><br></pre></td></tr></table></figure></div>
<p>24.检查时报错：OpenSSL is not properly installed on your system!!!,解决后重新执行检查</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">yum -y install openssl openssl-devel</span></span><br></pre></td></tr></table></figure></div>
<p>25.检查时报错：WARNING-this build will not support IPv6 please install libnl&#x2F;libnl-3 dev libraries to support UPV6 with IPVS.解决后重新执行检查</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">yum -y install libnl libnl-devel</span></span><br></pre></td></tr></table></figure></div>
<p>26.在&#x2F;etc&#x2F;keepalived文件夹下新增shutdown.sh脚本，用于MySQL挂掉以后将当前keepalived服务停止(两个服务器都需要创建)</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">killall keepalived</span><br></pre></td></tr></table></figure></div>
<p>27.修改&#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf 根据实际情况修改配置文件生成虚拟IP(两个服务都需要修改)<br>master: 192.168.206.135</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_MASTER</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    #interface为刚才查到的本机网卡名称</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">       #该ip为虚拟出来的vip地址</span><br><span class="line">       192.168.206.130</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置virtual_server  ip为上面配置的虚拟vip地址  端口为mysql的端口</span></span><br><span class="line">virtual_server 192.168.206.130 3306 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    #real_server 该配置为实际物理机ip地址 以及实际物理机mysql端口</span><br><span class="line">    real_server 192.168.206.135 3306 &#123;</span><br><span class="line">        #当该ip 端口连接异常时，执行该脚本</span><br><span class="line">        notify_down /etc/keepalived/shutdow.sh</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            #实际物理机ip地址</span><br><span class="line">            connect_ip 192.168.206.135</span><br><span class="line">            connect_timeuot 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>slave: 192.168.206.136</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vim /etc/keepalived/keepalived.conf</span></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     acassen@firewall.loc</span><br><span class="line">     failover@firewall.loc</span><br><span class="line">     sysadmin@firewall.loc</span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from Alexandre.Cassen@firewall.loc</span><br><span class="line">   smtp_server 192.168.200.1</span><br><span class="line">   smtp_connect_timeout 30</span><br><span class="line">   router_id LVS_MASTER</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line">   vrrp_strict</span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    #interface为刚才查到的本机网卡名称</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">       #该ip为虚拟出来的vip地址</span><br><span class="line">       192.168.206.130</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置virtual_server  ip为上面配置的虚拟vip地址  端口为mysql的端口</span></span><br><span class="line">virtual_server 192.168.206.130 3306 &#123;</span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    #real_server 该配置为实际物理机ip地址 以及实际物理机mysql端口</span><br><span class="line">    real_server 192.168.206.136 3306 &#123;</span><br><span class="line">        #当该ip 端口连接异常时，执行该脚本</span><br><span class="line">        notify_down /etc/keepalived/shutdow.sh</span><br><span class="line">        TCP_CHECK &#123;</span><br><span class="line">            #实际物理机ip地址</span><br><span class="line">            connect_ip 192.168.206.136</span><br><span class="line">            connect_timeuot 3</span><br><span class="line">            nb_get_retry 3</span><br><span class="line">            delay_before_retry 3</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>28.将keepalived加入开机自启，并启动</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl <span class="built_in">enable</span> keepalived</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">systemctl start keepalived</span></span><br></pre></td></tr></table></figure></div>
<p>29.使用MySQL客户端连接数据库，IP使用虚拟IP</p>
<p>30.创建函数报错</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">set</span> global log_bin_trust_function_creators=TRUE;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>MySql</category>
        <category>keepalived</category>
        <category>双机热备</category>
      </categories>
      <tags>
        <tag>MySql</tag>
        <tag>keepalived</tag>
        <tag>双机热备</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql安装</title>
    <url>/zlonw.github.io/2023/09/26/MySql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<a class="button  regular" href='https://www.mysql.com/' title='官网下载'>官网下载</a>
<a class="button  regular" href='https://cpv2.mairuan.com/formysql.com/trial/navicat_premium_trial_64.exe' title='navicat下载'>navicat下载</a>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ol>
<li><p>访问官网翻到最下面，在DOWNLOADS里点击MySQL Community<br>Server(社区版本)</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5fc0b41d15e77190845f1820.png"
                      alt="image-20201127111330924"
                ></p>
</li>
<li><p>选择下载页面，选择windows系统、根据电脑位数选择（32位&#x2F;64位），点击Download</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5fc0b43a15e77190845f2b21.png"
                      alt="image-20201127111807790"
                ></p>
</li>
<li><p>不用登录，直接下载</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5fc0b47c15e77190845f4108.png"
                      alt="image-20201127111931703"
                ></p>
</li>
</ol>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol start="4">
<li><p>下载完成后将压缩包解压到一个新的文件夹下。</p>
<p>mysql安装分为两种，一种是msi格式的，一种是zip格式，这里使用zip格式，解压后会得到一个文件夹。解压后进行一下配置就可以使用了</p>
</li>
<li><p>配置环境变量，解压后的文件夹下会有一个bin目录，将这个目录配置到环境变量里</p>
<p>右键我的电脑–&gt;属性–&gt;高级–&gt;环境变量</p>
<p>在系统变量下找到Path选中编辑，完成后点击确定。（注意：不要更改或者删除原有配置，win7系统编辑时在字符串最后要加英文的分号）</p>
<p>win7:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5fc0b4a015e77190845f4db5.png"
                      alt="image-20201127113710367"
                ></p>
<p>win10:</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5fc0b4bb15e77190845f59cd.png"
                      alt="image-20201127113449195"
                ></p>
</li>
<li><p>因为在最新版本中的zip中没有my.ini文件，需要自己新建一个my.ini文件,以下内容根据自己的安装路径。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]                      </span><br><span class="line">port  = 3306                  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql的安装目录</span>         </span><br><span class="line">basedir=D:\\Application\\MySQL\\mysql-8.0.22-winx64 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql数据库的数据的存放目录，必须是data，或者是\\xxx-data</span>  </span><br><span class="line">datadir=D:\\Application\\MySQL\\mysql-8.0.22-winx64\\data </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">innodb_log_arch_dir 默认datadir</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">innodb_log_group_home_dir  默认datadir</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置mysql服务器的字符集，默认编码</span> </span><br><span class="line">loose-character-set-server=utf8 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">连接数的操作系统监听队列数量，如果经常出现“拒绝连接”错误可适当增加此值</span>  </span><br><span class="line">back_log = 50                 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不使用接听TCP/IP端口方法，mysqld通过命名管道连接</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">skip-networking</span>              </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最大连接数量</span>                </span><br><span class="line">max_connections = 100         </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打开表的线程数量限定，最大4096，除非用mysqld_safe打开限制</span> </span><br><span class="line">table_open_cache = 2048       </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MySql 服务接收针对每个进程最大查询包大小</span>  </span><br><span class="line">max_allowed_packet = 16M      </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">作用于SQL查询单笔处理使用的内存 缓存，如果一笔操作的二进制数据超过了限定大小，将会在磁盘上开辟空间处理，一般设为 1-2M即可，默认1M</span> </span><br><span class="line">binlog_cache_size = 2M        </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">单个内存表的最大值限定</span>       </span><br><span class="line">max_heap_table_size = 64M     </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">为每个线程分配的排序缓冲大小</span> </span><br><span class="line">sort_buffer_size = 8M         </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">join</span> 连表操作的缓冲大小,根据实际业务来设置，默认8M</span> </span><br><span class="line">join_buffer_size = 32M        </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">操作多少个离开连接的线程的缓存</span> </span><br><span class="line">thread_cache_size = 8         </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置加全文检索中的最小单词长度。</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">ft_min_word_len = 4</span>          </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CREATE TABLE 语句的默认表类型，如果 不自己指定类型，则使用下行的类型</span>  </span><br><span class="line">default-storage-engine = InnoDB </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">线程堆栈大小，mysql说它自己用的堆栈大小不超过64K。这个值可 适当设高一点（在RCA的项目中都是共 用同一个数据库连接的），默认192K</span>  </span><br><span class="line">thread_stack = 800K           </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置事务处理的级别,默认 REPEATABLE-READ，一般 用它就即可，以下二行按顺序对应，</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">可读写未提交的数据，创建未提 交的数据副本读写，未提交之前可读不可写，只允许串行序列招行事务。</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">READ-UNCOMMITTED, READ-COMMITTED, REPEATABLE-READ, SERIALIZABLE</span> </span><br><span class="line">transaction_isolation = REPEATABLE-READ </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">单一内存临时表在内存中的大小，超过此值自动转换到磁盘操作</span>  </span><br><span class="line">tmp_table_size = 64M          </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动二进制日志功能，可通过它实现时间点恢复最新的备份</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">log-bin=mysql-bin</span>            </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">二进制日志格式，对就上一条，-建议混合格式</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">binlog_format=mixed</span>          </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">转换查询为缓慢查询</span>           </span><br><span class="line">slow_query_log                </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对应上一条，如果一个查询超过了下条设定的时间则执行上一条。</span>  </span><br><span class="line">long_query_time = 2           </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自定义主机ID识别符，用于主从或多 服务器之间识别，为 一个 int 类型</span>  </span><br><span class="line">server-id = 1                 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一般用来缓存MyISAM表的主键，也用于临时的磁盘表缓存主键，上面多次出现临时磁盘表，所以就算不用MyISAM也最好为其设置一个不小的值，默认32M</span> </span><br><span class="line">key_buffer_size = 64M         </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">全表扫描MyISAM表时的缓存，每个线程拥有下行的大小。</span>  </span><br><span class="line">read_buffer_size = 2M         </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">排序操作时与磁盘之间的缓存，分到每个线程，默认16M</span> </span><br><span class="line">read_rnd_buffer_size = 24M    </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MyISAM使用特殊树形进行批量插入时的缓存 ，如insert ... values(..)(..)(..)</span> </span><br><span class="line">bulk_insert_buffer_size = 64M </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">MyISAM索引文件的最大限定，</span></span><br><span class="line">myisam_max_sort_file_size = 10G </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果一个myisam表有一个以上的索引， MyISAM可以使用一个以上线 程来排序并行它们。较耗硬件资源，如果你的环境不错，可以增加此值。</span>  </span><br><span class="line">myisam_repair_threads = 2     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*** INNODB Specific options ***</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启下条将会禁用 INNODB</span>      </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">skip-innodb</span>                  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">innodb整体缓冲池大小，不宜过大，设为本地内存的 50%-75% 比较合适,在本机开发过程中可以设得较小一点如 64M,256M</span> </span><br><span class="line">innodb_buffer_pool_size = 256M </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">InnoDB的数据存储在一个或多个数据文件组成的表空间</span>  </span><br><span class="line">innodb_data_file_path = ibdata1:10M:autoextend </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">线程数内允许的InnoDB内核,不宜太高</span> </span><br><span class="line">innodb_thread_concurrency = 16 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">InnoDB的事务日志快存行为,默认为 1，为0可减轻磁盘I/0操作，还有以为2</span> </span><br><span class="line">innodb_flush_log_at_trx_commit = 1 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">InnoDB的用于的缓冲日志数据的大小</span> </span><br><span class="line">innodb_log_buffer_size = 8M   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日志文件，可设置为25%-90%的总体缓存大小，默认 256M. 修改此项要先删除datadir\ib_logfileXXX</span> </span><br><span class="line">innodb_log_file_size = 256M   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">日志组数量，默认为3</span>          </span><br><span class="line">innodb_log_files_in_group = 3 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">InnoDB的日志文件位置。默认是MySQL的datadir</span>  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">innodb_log_group_home_dir</span>    </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">InnoDB最大允许的脏页缓冲池的百分比，默认90</span>  </span><br><span class="line">innodb_max_dirty_pages_pct = 80 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">事务死锁超时设定</span>             </span><br><span class="line">innodb_lock_wait_timeout = 120 </span><br><span class="line">[client]                      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql客户端的字符集</span>     </span><br><span class="line">loose-character-set-server=utf8 </span><br><span class="line">[mysqldump]                   </span><br><span class="line">quick                         </span><br><span class="line">max_allowed_packet = 16M      </span><br><span class="line">[mysql]no-auto-rehash                </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Only allow UPDATEs and DELETEs that use keys.</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">safe-updates</span>                 </span><br><span class="line">[WinMySQLAdmin]               </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定mysql服务启动启动的文件</span> </span><br><span class="line">Server=D:\\Application\\MySQL\\mysql-8.0.22-winx64\\bin\\mysqld.exe </span><br></pre></td></tr></table></figure></div>

<ol start="7">
<li><p>初始化mysql</p>
<p>以管理员身份运行cmd(注意：一定要用管理员模式，不然权限不够),</p>
</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">    ##将目录切换到mysql的bin目录，或者在文件夹的地址栏直接输入cmd回车进入cmd </span><br><span class="line">    &gt; cd D:\Application\MySQL\mysql-8.0.22-winx64\bin</span><br><span class="line">    ## 初始化安装mysql,初始化完成后会输出A temp orary password is generated for root@localhost，后面就是初始密码。</span><br><span class="line">    &gt; mysqld --initialize --console</span><br><span class="line">    2020-11-27T07:07:11.500052Z 0 [System] [MY-013169] [Server] D:\Application\MySQL\mysql-8.0.22-winx64\bin\mysqld.exe (mysqld 8.0.22) initializing of server in progress as process 13308</span><br><span class="line">    2020-11-27T07:07:11.501149Z 0 [Warning] [MY-013242] [Server] --character-set-server: &#x27;utf8&#x27; is currently an alias for the character set UTF8MB3, but will be an alias for UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous.</span><br><span class="line">    2020-11-27T07:07:11.523063Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">    2020-11-27T07:07:12.592780Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">    2020-11-27T07:07:14.060740Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: T&gt;k%jFWYT3ir</span><br><span class="line">    ## 安装mysql服务             </span><br><span class="line">    &gt; mysqld install             </span><br><span class="line">    Service successfully installed.</span><br><span class="line">    ## 启动mysql服务             </span><br><span class="line">    &gt; net start mysql            </span><br><span class="line">    MySQL 服务正在启动 .         </span><br><span class="line">    MySQL 服务已经启动成功。     </span><br><span class="line">    ## 登录mysql,这时会提示输入密码就是初始密码</span><br><span class="line">    &gt; mysql -u root -p           </span><br><span class="line">    mysql: [Warning] unknown variable &#x27;loose-character-set-server=utf8&#x27;.</span><br><span class="line">    Enter password: ************ </span><br><span class="line">    Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">    Your MySQL connection id is 10 Server version: 8.0.22       </span><br><span class="line">    Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">    Oracle is a registered trademark of Oracle Corporation and/or its affiliates. Other names may be trademarks of their respective owners. Type &#x27;help;&#x27;or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line">    ## 修改初始密码              </span><br><span class="line">    mysql&gt; use mysql             </span><br><span class="line">    mysql&gt; ALTER USER root@localhost IDENTIFIED BY&#x27;123456&#x27;;                    </span><br><span class="line">    mysql&gt; flush privileges;     </span><br><span class="line">    Query OK, 0 rows affected (0.01 sec)</span><br><span class="line">    ##到这里就安装完成了    </span><br><span class="line">```     </span><br><span class="line"></span><br><span class="line">8. 安装桌面客户端</span><br><span class="line"></span><br><span class="line">    大多数都会用一个navicat来连接数据库，可以从官网上下载，上面也有下载地址，都是中文，安装选择安装路径后一直下一步就行</span><br><span class="line"></span><br><span class="line">9. navicat登录mysql</span><br><span class="line"></span><br><span class="line">    点击连接选择MySql</span><br><span class="line"></span><br><span class="line">    连接名可以随意填，ip或主机地址可以填localhost或者127.0.0.1，端口默认3306，安装时my.ini的port是多少就是多少，用户名root,密码是上面改后的密码123456，没改就是初始密码,完成后点击测试链接，提示连接成功后点击确定</span><br><span class="line"></span><br><span class="line">    ![image-20201127160350001](https://pic.downk.cc/item/5fc0b4d015e77190845f622d.png)</span><br><span class="line">    ![image-20201127160505559](https://pic.downk.cc/item/5fc0b4e615e77190845f6a08.png)</span><br><span class="line">10. dump备份数据库</span><br><span class="line">```shell</span><br><span class="line">mysqldump -uopension -p1q2w3e4r! -E -R --databases opension_test --single-transaction &gt; D:\data\交行\脚本\sql\opension.sql</span><br></pre></td></tr></table></figure></div>
<ol start="11">
<li>MySQL命令行创建用户并赋予权限<div class="highlight-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&gt;</span> # 创建用户</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="operator">&gt;</span> # 赋予权限</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">grant</span> <span class="keyword">create</span>,<span class="keyword">drop</span>,<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span>,<span class="keyword">select</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;pasword&#x27;</span>;</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">grant</span> <span class="keyword">create</span>,<span class="keyword">drop</span>,<span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span>,<span class="keyword">select</span> <span class="keyword">on</span> opension_test <span class="keyword">to</span> <span class="string">&#x27;optms&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;1q2w3e4r!&#x27;</span>;</span><br><span class="line">     <span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> opension_test.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;optms&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;1q2w3e4r!&#x27;</span>;</span><br><span class="line"><span class="operator">&gt;</span> # 刷新</span><br><span class="line"><span class="operator">&gt;</span> FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></div></li>
</ol>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>git学习</title>
    <url>/zlonw.github.io/2020/08/02/git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或大或小的项目</p>
<p>Git不仅仅是个版本控制系统，它也是内容管理系统，工作管理系统等</p>
<p>Git与SVN的区别：</p>
<ol>
<li>Git是分布式的，SVN不是</li>
<li>Git把内容按照元数据方式存储，SVN是按文件存储</li>
<li>Git分支和SVN的分支不同</li>
<li>Git没有全局的版本号，而SVN有</li>
<li>Git内容完整性要优于SVN</li>
</ol>
<p>本地仓库有Git维护的三棵”树”组成,这是Git的核心框架.分别是:</p>
<ol>
<li>工作区域: 就是平时存放项目代码的地方</li>
<li>暂存区域:<br>用于临时存放你的改动,事实上它只是一个文件,保存即将提交的文件列表信息</li>
<li>Git仓库:就是安全存放数据的位置,这里有提交的所有版本的数据.</li>
</ol>
<p>Git的工作流程:</p>
<ol>
<li>在工作目录中添加&#x2F;修改文件</li>
<li>将需要进行版本管理的文件放入暂存区域</li>
<li>将暂存区域的文件提交到Git仓库</li>
</ol>
<p>HEAD是什么？</p>
<p>HEAD可以看作是”我”，例如 git log日志中HEAD -&gt;<br>master指的是：我在master分支上</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li>初始化git<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br></pre></td></tr></table></figure></div></li>
<li>将文件添加到暂存区域<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add 文件名称</span>      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把新增、修改的加到暂存区</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span>         </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有修改、已删除的文件到暂存区中</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -u [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add --update [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -A [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add --all [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -i [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add --interactive [&lt;文件路径&gt;]</span></span><br></pre></td></tr></table></figure></div></li>
<li>将文件提交到本地仓库<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;版本描述&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改上次提交的描述信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend</span></span><br></pre></td></tr></table></figure></div></li>
<li>添加暂存区并提交<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一步完成提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -am <span class="string">&quot;说明&quot;</span></span> </span><br></pre></td></tr></table></figure></div></li>
<li>查看当前版本状态（查看是否有未提交的文件）</li>
</ol>
<p>On branch 分支名称： 表示当前所在分支<br>nothing to commit,working directory clean:表示工作目录是干净的，没有需要提交的文件</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span>                 </span><br><span class="line">On branch master Untracked files:             </span><br><span class="line">(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) LICENSE(红色) nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure></div>
<ol start="6">
<li>拉取远程仓库的项目<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> 目标地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/user/demo.git</span></span><br></pre></td></tr></table></figure></div></li>
<li>撤销</li>
</ol>
<p>当发现commit的内容有错误的时候有两种处理方法：</p>
<pre><code>1. 修改错误内容再commit一次，但是会留下commit记录
2. 使用git reset命令撤销这一次错误的commit
</code></pre>
<p>reset有三个模式：</p>
<p>–head<br>重置工作区域和暂存区域，也就是说之前没有commit的内容直接擦掉恢复到上一次commit的时候</p>
<p>–soft<br>重置工作区域，只是将索引指向重置，暂存区还有本次修改的东西，所以会造成新的差异</p>
<p>不加参数(mixed)<br>保留工作区域，清空暂存区域，也就是说工作目录跟暂存区域强行合并了一次，有差异也会放进工作目录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset</span></span><br></pre></td></tr></table></figure></div>
<ol start="8">
<li>查看git的日志信息<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出<span class="built_in">log</span></span>           </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span>         </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简化git日志输出格式</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> oneline</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">绘制分支图</span>           </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline --decorate --graph --all</span></span><br></pre></td></tr></table></figure></div></li>
<li>将远程主机的最新内容拉到本地<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程最新内容拉到本地，不进行合并</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch origin master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程主机的master分支最新内容拉取到本地当前分支直接合并</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin master:&lt;本地分支名&gt;</span> </span><br></pre></td></tr></table></figure></div></li>
<li>分支(branch)<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch 分支名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改分支名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不指定原分支名称则为当前所在分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制修改分支名称</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本地的所有分支，当前所在分支以 <span class="string">&quot;*&quot;</span> 标出</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span>                 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本地的所有分支并显示最后一次提交，当前所在分支以 <span class="string">&quot;*&quot;</span> 标出</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span>              </span><br></pre></td></tr></table></figure></div></li>
<li>切换分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout 分支名称</span>      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">适用于切换分支的时候将当前分支内容打包带走，同步到切换的分支下</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这个命令有两个注意点，1. 两个分支内容不同会造成冲突  2. 切换到新的分支后当前分支修改的内容就丢失了</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">git checkout --merge &lt;分支名称&gt;</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要要用来比较两个分支之间的差异内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -p &lt;分支名称&gt;</span> </span><br></pre></td></tr></table></figure></div></li>
<li>创建并切换分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有同名分支则会报错</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b 分支名称</span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-B 强制创建，有同名直接覆盖</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -B 分支名称</span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果当前分支累计了N次提交，这个命令会创建一个新的分支有N次提交的内容但是没有提交记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -orphan &lt;分支名称&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>删除文件<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同时删除工作区域和暂存区文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span></span>           </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只删除暂存区，只是想要某文件不被版本控制</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached</span>  </span><br></pre></td></tr></table></figure></div></li>
<li>重命名文件<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">mv</span> 旧文件名称 新文件名称</span></span><br></pre></td></tr></table></figure></div></li>
<li>合并分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并需要切换到master上</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge</span></span><br></pre></td></tr></table></figure></div></li>
<li>删除分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果未合并会有问题</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d 分支名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制删除</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -D 分支名称</span></span><br></pre></td></tr></table></figure></div></li>
<li>操作远程库<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出已经存在的远程仓库</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span>               </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出远程仓库的详细信息，在别名后面列出URL地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span>            </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote --verbose</span>     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加远程仓库</span>               </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改远程仓库的别名</span>         </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定名称的远程仓库</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote remove &lt;远程仓库的别名&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改远程仓库的 URL 地址</span>    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>将已经提交的记录合并到当前分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick &lt;commit <span class="built_in">id</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>从远程仓库获取最新的版本到本地<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程仓库所有分支的最新版本全部取回到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch &lt;远程仓库的别名&gt;</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程仓库指定分支的最新版本取回到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span> </span><br></pre></td></tr></table></figure></div></li>
<li>比较版本之间的差异<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span>                   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较暂存区中的文件和上次提交时的差异</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --cached</span>          </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --staged</span>          </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较当前文件和上次提交时的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff HEAD</span>              </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看从指定的版本之后改动的内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff &lt;commit ID&gt;</span>       </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较两个分支之间的差异</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff &lt;分支名称&gt; &lt;分支名称&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看两个分支分开后各自的改动内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff &lt;分支名称&gt;...&lt;分支名称&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用git diff的时候可能会出现中文乱码的问题，需要设置编码格式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git diff 快照版本号快照版本号 可以对比两个历史快照</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global i18n.commitencoding utf-8</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global i18n.logoutputencoding utf-8</span></span><br></pre></td></tr></table></figure></div></li>
<li>还原提交记录<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置暂存区，但文件不受影响</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相当于将用 <span class="string">&quot;git add&quot;</span> 命令更新到暂存区的内容撤出暂存区，可以指定文件</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有指定 commit ID 则默认为当前 HEAD</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset [&lt;文件路径&gt;]</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --mixed [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset &lt;commit ID&gt;</span>      </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --mixed &lt;commit ID&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 HEAD 的指向改变,撤销到指定的提交记录，文件未修改</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相当于调用 <span class="string">&quot;git reset --mixed&quot;</span> 命令后又做了一次 <span class="string">&quot;git add&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --soft &lt;commit ID&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard &lt;commit ID&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>生成新的提交来撤销某次提交<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert &lt;commit <span class="built_in">id</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>让git忽略某后缀的文件，不再识别</li>
</ol>
<p>在工作目录创建一个.gitignore文件,完了再执行git status,发现指定后缀已经不跟踪状态了。后续要是有不需要跟踪的文件可以再.gitignore里面直接添加该文件的名称</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> *.后缀 &gt; .gitignore</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>tomcat+nginx简单配置</title>
    <url>/zlonw.github.io/2023/09/26/tomcat-nginx/</url>
    <content><![CDATA[<ol>
<li><p>下载对应版本Tomcat、nginx安装包</p>
</li>
<li><p>服务器准备：</p>
<p>前端：192.168.206.135、192.168.206.136:7001</p>
<p>后端：192.168.206.134、192.168.206.138:7002</p>
<p>nginx前端:192.168.206.136:7021</p>
<p>nginx后端:192.168.206.134:7022</p>
</li>
<li><p>安装nginx</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">tar -zxvf nginx.tar.gz <span class="comment">#解压</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> nginx</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">./configure --with-http_stub_status_module --with-http_ssl_module <span class="comment">#执行命令 考虑到后续安装ssl证书 添加两个模块</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">make install</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>修改配置文件(默认安装位置：&#x2F;usr&#x2F;local&#x2F;nginx)</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vim /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">前端 代理</span></span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    upstream optmsfront&#123;</span><br><span class="line">	ip_hash;</span><br><span class="line">    server 192.168.206.135:7001;</span><br><span class="line">	server 192.168.206.136:7001;</span><br><span class="line">    &#125;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       7021;</span><br><span class="line">        server_name  192.168.206.136;</span><br><span class="line">        location / &#123;</span><br><span class="line">          proxy_pass http://optmsfront;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后端代理</span></span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    upstream optmsfront&#123;</span><br><span class="line">	ip_hash;</span><br><span class="line">    server 192.168.206.134:7002;</span><br><span class="line">	server 192.168.206.138:7002;</span><br><span class="line">    &#125;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       7022;</span><br><span class="line">        server_name  192.168.206.134;</span><br><span class="line">        location / &#123;</span><br><span class="line">          proxy_pass http://optmsfront;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
<li><p>解压Tomcat并修改配置文件</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">tar -zxvf tomcat.tar.gz</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vim /tomcat/conf/server.xml</span></span><br></pre></td></tr></table></figure></div>
<p>修改tomcat端口，前端服务器端口改为：7001，后端服务器的端口改为：7002</p>
</li>
<li><p>将编译后的项目放在tomcat&#x2F;webapp下启动</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">nohup</span> ./startup.sh &amp;</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>启动nginx</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启nginx</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/usr/local/nginx/sbin/nginx -s reload</span></span><br></pre></td></tr></table></figure></div></li>
<li><p>访问前端nginx测试是否成功<br><a class="link"   href="http://192.168.206.136:7021/%E9%A1%B9%E7%9B%AE%E5%90%8D" >http://192.168.206.136:7021/项目名 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>tomcat</category>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>PLSQL执行计划</title>
    <url>/zlonw.github.io/2023/09/26/PLSQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="1-什么是执行计划"><a href="#1-什么是执行计划" class="headerlink" title="1. 什么是执行计划"></a>1. 什么是执行计划</h2><p>对一个查询任务，做出一份怎样完成任务的详细方案。Sql是一种傻瓜式语言，每一个条件就是一个需求，访问的顺序不同就形成了不同的执行计划，Oracle必须做出选择，一次只能有一种访问路径，一个访问路径就是一个执行计划</p>
<h2 id="2-怎么查看执行计划"><a href="#2-怎么查看执行计划" class="headerlink" title="2. 怎么查看执行计划"></a>2. 怎么查看执行计划</h2><p>在sql窗口执行完一条SQL后按F5即可查看这条sql的执行计划</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f42455a160a154a675c7fef.png"
                      alt="image-20200814161656769"
                ></p>
<h2 id="3-配置执行计划窗口"><a href="#3-配置执行计划窗口" class="headerlink" title="3. 配置执行计划窗口"></a>3. 配置执行计划窗口</h2><p>plsql中选择： 工具–&gt; 首选项 –&gt; 窗口类型 –&gt; 计划窗口</p>
<p>根据需要选择在执行计划窗口要显示的列</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f424546160a154a675c75ae.png"
                      alt="image-20200814160948039"
                ></p>
<h2 id="4-常用列字段解释"><a href="#4-常用列字段解释" class="headerlink" title="4. 常用列字段解释"></a>4. 常用列字段解释</h2><p>Description：下面的内容分别是整条SQL的执行步骤，缩进最多的最先执行，缩进量相同，则按照从上往下的顺序执行。</p>
<p>对象所有者(Object owner)</p>
<p>对象名称(Object name)</p>
<p>耗费(COST)\CPU耗费:<br>Oracle估计的该步骤执行的成本,用于说明SQL执行的代价,理论上越小越好</p>
<p>基数(Rows): Oracle估计的当前操作返回的结果集行数</p>
<p>字节(Bytes): 执行该步骤后返回的字节数</p>
<p>时间(Time): Oracle估计当前操作需要的时间</p>
<h2 id="5-Description动作的说明"><a href="#5-Description动作的说明" class="headerlink" title="5. Description动作的说明"></a>5. Description动作的说明</h2><ol>
<li><p>TABLE ACCESS FULL: 全表扫描</p>
<p>Oracle会读取表中所有的行,并检查每一行是否满足SQL语句中的where条件</p>
</li>
<li><p>TABLE ACCESS BY ROWID: 通过ROWID的表存区</p>
<p>Rowid:<br>Oracle数据库的表中每一行数据都有一个唯一的标识符,或者称为ROWID,在Oracle内部通常就是使用它来访问数据的.ROWID需要10个字节的存储空间,并用18个字符来显示,该值表明了该行在Oracle数据库中物理具体位置.具体内容请点<a class="link"   href="https://blog.csdn.net/qq_36249352/article/details/79494162" >传送门 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>{target&#x3D;”_blank”<br>rel&#x3D;”noopener”}</p>
</li>
<li><p>TABLE ACCESS BY INDEX SCAN: (索引扫描)</p>
<p>在索引块中,既存储每个索引的键值,也存储具有该键值的行的ROWID</p>
<p>所以索引扫描分为两步:</p>
<ol>
<li>扫描索引得到对应的ROWID</li>
<li>通过ROWID定位到具体的行读取数据.</li>
</ol>
</li>
</ol>
<h2 id="6-索引扫描"><a href="#6-索引扫描" class="headerlink" title="6. 索引扫描"></a>6. 索引扫描</h2><ol>
<li><p>INDEX UNIQUE SCAN: 索引唯一扫描</p>
<p>针对唯一性索引（UNIQUE INDEX）的扫描，每次最多只返回一条记录</p>
</li>
<li><p>INDEX RANGE SCAN: 索引范围扫描</p>
<p>使用一个索引存取多行数据；发生索引范围扫描的三种情况：</p>
<ol>
<li>在唯一索引上使用了范围操作符（如：&gt; &lt; &lt;&gt; &gt;&#x3D; &lt;&#x3D; between）</li>
<li>在组合索引上，只使用部分列进行查询</li>
<li>对非唯一索引列上进行的任何查询</li>
</ol>
</li>
<li><p>INDE FULL SCAN: 索引全扫描</p>
<p>进行全索引扫描时查出的数据都必须从索引中可以直接得到</p>
</li>
<li><p>INDEX FAST FULL SCAN: 索引快速扫描</p>
<p>与INDEX FULL SCAN相似，但是索引快速扫描不会对查询出的数据进行排序</p>
</li>
<li><p>INDEX SKIP SCAN: 索引跳跃扫描</p>
<p>有时候复合索引的前导列（索引包含的第一列）没有在查询语句中出现，oralce也会使用该复合索引，这时候就使用的INDEX<br>SKIP SCAN;</p>
</li>
</ol>
<h2 id="7-表的连接方式（JOIN）"><a href="#7-表的连接方式（JOIN）" class="headerlink" title="7. 表的连接方式（JOIN）"></a>7. 表的连接方式（JOIN）</h2><ol>
<li>SORT MERGE JOIN(排序-合并连接)</li>
<li>NESTED LOOPS(嵌套循环)</li>
<li>HASH JOIN(哈希连接)</li>
<li>CARTESIAN PRODUCT(笛卡尔积)</li>
</ol>
]]></content>
      <categories>
        <category>oracle</category>
        <category>plsql</category>
        <category>执行计划</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>plsql</tag>
        <tag>执行计划</tag>
      </tags>
  </entry>
  <entry>
    <title>win10安装weblogic</title>
    <url>/zlonw.github.io/2023/09/25/win10%E5%AE%89%E8%A3%85weblogic/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>本次安装版本：weblogic10.3.6</p>
<p>第一次安装，因jdk版本不支持1.8以上报错，后来换成了1.6好使了。<a class="button  regular" href='https://www.oracle.com/middleware/technologies/fusionmiddleware-downloads.html' title='安装包下载'>安装包下载</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>点击安装包，进入欢迎使用页面，直接点下一步</p>
</li>
<li><p>选择中间件的主目录，创建空文件夹就行，这里创建了bea目录，选好目录点下一步</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25476014195aa5941acb54.png"
                     
                ></p>
</li>
<li><p>注册安全更新页面，可以不选，直接下一步</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25477714195aa5941ad52d.png"
                     
                ></p>
</li>
<li><p>提示连接失败，选择不接收配置中通知</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25478214195aa5941ad97e.png"
                     
                ></p>
</li>
<li><p>选择安装类型为典型</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25479014195aa5941adfcd.png"
                     
                ></p>
</li>
<li><p>选择jdk安装目录，注意要使用1.8以下的版本，下一步</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25479f14195aa5941ae5cd.png"
                     
                ></p>
</li>
<li><p>选择产品安装目录，默认在中间件目录下，下一步</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547ab14195aa5941ae9f7.png"
                     
                ></p>
</li>
<li><p>安装概要，下一步开始安装</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547b614195aa5941aee63.png"
                     
                ></p>
</li>
<li><p>安装完成，默认会选中运行Quickstart进入配置页。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547c214195aa5941af309.png"
                     
                ></p>
</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li><p>选择配置类型 ，创建新的域</p>
<p>Getting started with weblogic server 创建新的域</p>
<p>Upgtade domains to version 升级现有版本到10.3.6</p>
<p>access documentation online 文档</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547cd14195aa5941af70c.png"
                     
                ></p>
</li>
<li><p>选择创建新的weblogic域</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547d814195aa5941afaf7.png"
                     
                ></p>
</li>
<li><p>直接下一步</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547e014195aa5941afd90.png"
                     
                ></p>
</li>
<li><p>指定域名和位置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547ea14195aa5941b0069.png"
                     
                ></p>
</li>
<li><p>配置管理员用户名和密码</p>
<p>用户名：weblogic</p>
<p>密码： 1234qwer</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547f414195aa5941b030d.png"
                     
                ></p>
</li>
<li><p>配置服务器启动模式和jdk，开发模式自动面密码，生产模式启动时需要填写用户名和密码，这里选择生产模式，后面再创建一个开发模式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25480014195aa5941b0689.png"
                     
                ></p>
</li>
<li><p>选择”管理服务器”、”受管服务器、集群机器”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25480a14195aa5941b09cd.png"
                     
                ></p>
</li>
<li><p>名称默认即可，选择本地监听地址，指定端口号</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25481314195aa5941b0ca8.png"
                     
                ></p>
</li>
<li><p>单机不配置受管服务器，直接下一步</p>
</li>
<li><p>单机不配置集群，直接下一步</p>
</li>
<li><p>不配置计算机，直接下一步</p>
</li>
<li><p>点创建</p>
</li>
<li><p>启动服务，在\bea\user_projects\domains\weblogic1036下启动startWeblogic.cmd,输入用户名和密码，启动，看到RUNNING<br>mode启动成功。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25481314195aa5941b0ca8.png"
                     
                ></p>
</li>
<li><p>浏览器访问<a href="http://IP:PORT/console访问weblogic控制台，输入用户名与密码点击登录">http://IP:PORT/console访问weblogic控制台，输入用户名与密码点击登录</a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25482714195aa5941b13d7.png"
                     
                ></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Server</category>
      </categories>
      <tags>
        <tag>weblogic</tag>
        <tag>weblogic安装</tag>
      </tags>
  </entry>
</search>
