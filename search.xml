<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[win10安装weblogic]]></title>
      <url>/zlonw.github.io/2023/09/25/win10%E5%AE%89%E8%A3%85weblogic/</url>
      <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>本次安装版本：weblogic10.3.6</p>
<p>第一次安装，因jdk版本不支持1.8以上报错，后来换成了1.6好使了。安装包下载：<a class="button  regular" href='https://www.oracle.com/middleware/technologies/fusionmiddleware-downloads.html' title='示例博客'>示例博客</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><p>点击安装包，进入欢迎使用页面，直接点下一步</p>
</li>
<li><p>选择中间件的主目录，创建空文件夹就行，这里创建了bea目录，选好目录点下一步</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25476014195aa5941acb54.png"
                     
                ></p>
</li>
<li><p>注册安全更新页面，可以不选，直接下一步</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25477714195aa5941ad52d.png"
                     
                ></p>
</li>
<li><p>提示连接失败，选择不接收配置中通知</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25478214195aa5941ad97e.png"
                     
                ></p>
</li>
<li><p>选择安装类型为典型</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25479014195aa5941adfcd.png"
                     
                ></p>
</li>
<li><p>选择jdk安装目录，注意要使用1.8以下的版本，下一步</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25479f14195aa5941ae5cd.png"
                     
                ></p>
</li>
<li><p>选择产品安装目录，默认在中间件目录下，下一步</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547ab14195aa5941ae9f7.png"
                     
                ></p>
</li>
<li><p>安装概要，下一步开始安装</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547b614195aa5941aee63.png"
                     
                ></p>
</li>
<li><p>安装完成，默认会选中运行Quickstart进入配置页。</p>
<p> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547c214195aa5941af309.png"
                     
                ></p>
</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li><p>选择配置类型 ，创建新的域</p>
<p>Getting started with weblogic server 创建新的域</p>
<p>Upgtade domains to version 升级现有版本到10.3.6</p>
<p>access documentation online 文档</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547cd14195aa5941af70c.png"
                     
                ></p>
</li>
<li><p>选择创建新的weblogic域</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547d814195aa5941afaf7.png"
                     
                ></p>
</li>
<li><p>直接下一步</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547e014195aa5941afd90.png"
                     
                ></p>
</li>
<li><p>指定域名和位置</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547ea14195aa5941b0069.png"
                     
                ></p>
</li>
<li><p>配置管理员用户名和密码</p>
<p>用户名：weblogic</p>
<p>密码： 1234qwer</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f2547f414195aa5941b030d.png"
                     
                ></p>
</li>
<li><p>配置服务器启动模式和jdk，开发模式自动面密码，生产模式启动时需要填写用户名和密码，这里选择生产模式，后面再创建一个开发模式</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25480014195aa5941b0689.png"
                     
                ></p>
</li>
<li><p>选择”管理服务器”、”受管服务器、集群机器”</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25480a14195aa5941b09cd.png"
                     
                ></p>
</li>
<li><p>名称默认即可，选择本地监听地址，指定端口号</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25481314195aa5941b0ca8.png"
                     
                ></p>
</li>
<li><p>单机不配置受管服务器，直接下一步</p>
</li>
<li><p>单机不配置集群，直接下一步</p>
</li>
<li><p>不配置计算机，直接下一步</p>
</li>
<li><p>点创建</p>
</li>
<li><p>启动服务，在\bea\user_projects\domains\weblogic1036下启动startWeblogic.cmd,输入用户名和密码，启动，看到RUNNING<br>mode启动成功。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25481314195aa5941b0ca8.png"
                     
                ></p>
</li>
<li><p>浏览器访问<a href="http://IP:PORT/console访问weblogic控制台，输入用户名与密码点击登录">http://IP:PORT/console访问weblogic控制台，输入用户名与密码点击登录</a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.downk.cc/item/5f25482714195aa5941b13d7.png"
                     
                ></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> weblogic weblogic安装 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git学习]]></title>
      <url>/zlonw.github.io/2020/08/02/git%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或大或小的项目</p>
<p>Git不仅仅是个版本控制系统，它也是内容管理系统，工作管理系统等</p>
<p>Git与SVN的区别：</p>
<ol>
<li>Git是分布式的，SVN不是</li>
<li>Git把内容按照元数据方式存储，SVN是按文件存储</li>
<li>Git分支和SVN的分支不同</li>
<li>Git没有全局的版本号，而SVN有</li>
<li>Git内容完整性要优于SVN</li>
</ol>
<p>本地仓库有Git维护的三棵”树”组成,这是Git的核心框架.分别是:</p>
<ol>
<li>工作区域: 就是平时存放项目代码的地方</li>
<li>暂存区域:<br>用于临时存放你的改动,事实上它只是一个文件,保存即将提交的文件列表信息</li>
<li>Git仓库:就是安全存放数据的位置,这里有提交的所有版本的数据.</li>
</ol>
<p>Git的工作流程:</p>
<ol>
<li>在工作目录中添加&#x2F;修改文件</li>
<li>将需要进行版本管理的文件放入暂存区域</li>
<li>将暂存区域的文件提交到Git仓库</li>
</ol>
<p>HEAD是什么？</p>
<p>HEAD可以看作是”我”，例如 git log日志中HEAD -&gt;<br>master指的是：我在master分支上</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol>
<li>初始化git<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br></pre></td></tr></table></figure></div></li>
<li>将文件添加到暂存区域<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add 文件名称</span>      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把新增、修改的加到暂存区</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span>         </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有修改、已删除的文件到暂存区中</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -u [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add --update [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -A [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add --all [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add -i [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add --interactive [&lt;文件路径&gt;]</span></span><br></pre></td></tr></table></figure></div></li>
<li>将文件提交到本地仓库<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;版本描述&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改上次提交的描述信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit --amend</span></span><br></pre></td></tr></table></figure></div></li>
<li>添加暂存区并提交<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一步完成提交</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -am <span class="string">&quot;说明&quot;</span></span> </span><br></pre></td></tr></table></figure></div></li>
<li>查看当前版本状态（查看是否有未提交的文件）</li>
</ol>
<p>On branch 分支名称： 表示当前所在分支<br>nothing to commit,working directory clean:表示工作目录是干净的，没有需要提交的文件</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git status</span>                 </span><br><span class="line">On branch master Untracked files:             </span><br><span class="line">(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) LICENSE(红色) nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure></div>
<ol start="6">
<li>拉取远程仓库的项目<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> 目标地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/user/demo.git</span></span><br></pre></td></tr></table></figure></div></li>
<li>撤销</li>
</ol>
<p>当发现commit的内容有错误的时候有两种处理方法：</p>
<pre><code>1. 修改错误内容再commit一次，但是会留下commit记录
2. 使用git reset命令撤销这一次错误的commit
</code></pre>
<p>reset有三个模式：</p>
<p>–head<br>重置工作区域和暂存区域，也就是说之前没有commit的内容直接擦掉恢复到上一次commit的时候</p>
<p>–soft<br>重置工作区域，只是将索引指向重置，暂存区还有本次修改的东西，所以会造成新的差异</p>
<p>不加参数(mixed)<br>保留工作区域，清空暂存区域，也就是说工作目录跟暂存区域强行合并了一次，有差异也会放进工作目录</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset</span></span><br></pre></td></tr></table></figure></div>
<ol start="8">
<li>查看git的日志信息<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出<span class="built_in">log</span></span>           </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span></span>         </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简化git日志输出格式</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> oneline</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">绘制分支图</span>           </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">log</span> --oneline --decorate --graph --all</span></span><br></pre></td></tr></table></figure></div></li>
<li>将远程主机的最新内容拉到本地<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程最新内容拉到本地，不进行合并</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch origin master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程主机的master分支最新内容拉取到本地当前分支直接合并</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin master:&lt;本地分支名&gt;</span> </span><br></pre></td></tr></table></figure></div></li>
<li>分支(branch)<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch 分支名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改分支名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不指定原分支名称则为当前所在分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制修改分支名称</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本地的所有分支，当前所在分支以 <span class="string">&quot;*&quot;</span> 标出</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch</span>                 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出本地的所有分支并显示最后一次提交，当前所在分支以 <span class="string">&quot;*&quot;</span> 标出</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span>              </span><br></pre></td></tr></table></figure></div></li>
<li>切换分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout 分支名称</span>      </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">适用于切换分支的时候将当前分支内容打包带走，同步到切换的分支下</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这个命令有两个注意点，1. 两个分支内容不同会造成冲突  2. 切换到新的分支后当前分支修改的内容就丢失了</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">git checkout --merge &lt;分支名称&gt;</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要要用来比较两个分支之间的差异内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -p &lt;分支名称&gt;</span> </span><br></pre></td></tr></table></figure></div></li>
<li>创建并切换分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果有同名分支则会报错</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b 分支名称</span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-B 强制创建，有同名直接覆盖</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -B 分支名称</span>   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果当前分支累计了N次提交，这个命令会创建一个新的分支有N次提交的内容但是没有提交记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -orphan &lt;分支名称&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>删除文件<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">同时删除工作区域和暂存区文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span></span>           </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">只删除暂存区，只是想要某文件不被版本控制</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached</span>  </span><br></pre></td></tr></table></figure></div></li>
<li>重命名文件<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">mv</span> 旧文件名称 新文件名称</span></span><br></pre></td></tr></table></figure></div></li>
<li>合并分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">合并需要切换到master上</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge</span></span><br></pre></td></tr></table></figure></div></li>
<li>删除分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果未合并会有问题</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -d 分支名称</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强制删除</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -D 分支名称</span></span><br></pre></td></tr></table></figure></div></li>
<li>操作远程库<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出已经存在的远程仓库</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote</span>               </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出远程仓库的详细信息，在别名后面列出URL地址</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span>            </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote --verbose</span>     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加远程仓库</span>               </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add &lt;远程仓库的别名&gt; &lt;远程仓库的URL地址&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改远程仓库的别名</span>         </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定名称的远程仓库</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote remove &lt;远程仓库的别名&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改远程仓库的 URL 地址</span>    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>将已经提交的记录合并到当前分支<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git cherry-pick &lt;commit <span class="built_in">id</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>从远程仓库获取最新的版本到本地<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程仓库所有分支的最新版本全部取回到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch &lt;远程仓库的别名&gt;</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程仓库指定分支的最新版本取回到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span> </span><br></pre></td></tr></table></figure></div></li>
<li>比较版本之间的差异<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较当前文件和暂存区中文件的差异，显示没有暂存起来的更改</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff</span>                   </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较暂存区中的文件和上次提交时的差异</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --cached</span>          </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff --staged</span>          </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较当前文件和上次提交时的差异</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff HEAD</span>              </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看从指定的版本之后改动的内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff &lt;commit ID&gt;</span>       </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较两个分支之间的差异</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff &lt;分支名称&gt; &lt;分支名称&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看两个分支分开后各自的改动内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git diff &lt;分支名称&gt;...&lt;分支名称&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用git diff的时候可能会出现中文乱码的问题，需要设置编码格式</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">git diff 快照版本号快照版本号 可以对比两个历史快照</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global i18n.commitencoding utf-8</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global i18n.logoutputencoding utf-8</span></span><br></pre></td></tr></table></figure></div></li>
<li>还原提交记录<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重置暂存区，但文件不受影响</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相当于将用 <span class="string">&quot;git add&quot;</span> 命令更新到暂存区的内容撤出暂存区，可以指定文件</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有指定 commit ID 则默认为当前 HEAD</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset [&lt;文件路径&gt;]</span>     </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --mixed [&lt;文件路径&gt;]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 HEAD 的指向改变，撤销到指定的提交记录，文件未修改</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset &lt;commit ID&gt;</span>      </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --mixed &lt;commit ID&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 HEAD 的指向改变,撤销到指定的提交记录，文件未修改</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">相当于调用 <span class="string">&quot;git reset --mixed&quot;</span> 命令后又做了一次 <span class="string">&quot;git add&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --soft &lt;commit ID&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 HEAD 的指向改变，撤销到指定的提交记录，文件也修改了</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git reset --hard &lt;commit ID&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>生成新的提交来撤销某次提交<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git revert &lt;commit <span class="built_in">id</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>
<li>让git忽略某后缀的文件，不再识别</li>
</ol>
<p>在工作目录创建一个.gitignore文件,完了再执行git status,发现指定后缀已经不跟踪状态了。后续要是有不需要跟踪的文件可以再.gitignore里面直接添加该文件的名称</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> *.后缀 &gt; .gitignore</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
